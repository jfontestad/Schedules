eval(runj)
} else{
eval(rund)
eval(rune)
eval(runf)
eval(rung)
eval(runh)
eval(runi)
setwd(file_path)
eval(runj)
}
AllClass <- sqlQuery(channel,AllClass)
ReportGrp <-sqlQuery(channel,ReportGrp)
## Execute
## USA
if (CountryCode == 'USA'){
eval(runc)
eval(rund)
eval(rune)
eval(runf)
eval(rung)
eval(runh)
eval(runi)
setwd(file_path)
eval(runj)
} else{
eval(rund)
eval(rune)
eval(runf)
eval(rung)
eval(runh)
eval(runi)
setwd(file_path)
eval(runj)
}
LastMonth_Sched <- sqlQuery(channel,LM_UK_load)
LastMonth_depr <- sqlQuery(channel,Last_depr_UKload)
AllClass <- sqlQuery(channel,AllClass)
ReportGrp <-sqlQuery(channel,ReportGrp)
runc<-parse('c.listings.r')
rund<-parse('d.datacleaning.r')
rune<-parse('e.buildmodel.r')
runf<-parse('f.adjustment.r')
rung<-parse('g.violationcheck.r')
runh<-parse('h. depreciation&monthlimit.r')
runi<-parse('i.makeschedules.r')
runj<-parse('j.upload&plots.r')
eval(rund)
###################################################################################################################
###################################################################################################################
######################################## Make Data Merge & Clean ##################################################
###################################################################################################################
###################################################################################################################
#if(CountryCode == 'USA'){
####### Prepare the candidate output list for Part 3 schedules ########
####### ClassId list = All - Out - OutR ########
Out_make <- anti_join(AllClass,comb_Out %>% select(ClassificationId),by='ClassificationId') %>%
select(ClassificationId,CategoryName,CategoryId,SubcategoryName,SubcategoryId,MakeName,MakeId)
AllClass
channel<-odbcConnect(DBserver)
AllClass <- sqlQuery(channel,AllClass)
AllClass<-"
SELECT [ClassificationId]
,[CategoryId]
,[CategoryName]
,[SubcategoryId]
,[SubcategoryName]
,[MakeId]
,[MakeName]
FROM [ras_sas].[BI].[Classifications]
Where  Modelid is null
Order By
[CategoryName]
,[SubcategoryName]
,[MakeName]"
AllClass <- sqlQuery(channel,AllClass)
ReportGrp <-sqlQuery(channel,ReportGrp)
################################ Grouping #########################################
ReportGrp<-
"SET NOCOUNT ON
DROP TABLE IF EXISTS #reptGrp
SELECT Distinct
[CategoryId]
,CASE WHEN [ReportGroup] LIKE '% Earth Moving' THEN 'Earth Moving'
WHEN ReportGroup in ('Aerial','Telehandlers') THEN 'Aerial' ELSE [ReportGroup] END AS [ReportGroup]
INTO #reptGrp
FROM [ras_sas].[BI].[Subcategories]
Where CategoryId Not In (220,	1948,	18,	4,	1949,	234,	21,	31,	2733,	2706,	2718,	2692,	2724,	2674,	2700,	2708)
DELETE #reptGrp
WHERE [ReportGroup] ='Global' AND CategoryId in (15,29,362)
SELECT * FROM #reptGrp Order By ReportGroup"
ReportGrp <-sqlQuery(channel,ReportGrp)
eval(rund)
eval(rune)
eval(runf)
eval(rung)
eval(runh)
eval(runi)
setwd(file_path)
eval(runj)
rune<-parse('e.buildmodel.r')
setwd(scripts_path)
runc<-parse('c.listings.r')
rund<-parse('d.datacleaning.r')
rune<-parse('e.buildmodel.r')
runf<-parse('f.adjustment.r')
eval(rune)
eval(runf)
eval(rung)
eval(runh)
eval(runi)
setwd(file_path)
eval(runj)
excelfile = '20200331 SchedulesManagement.xlsx'
plotFolder = paste("Plots",Sys.Date())
dir.create(plotFolder)
## set directory of r scripts
scripts_path = "C:/Users/vanessa.li/Documents/GitHub/Schedules/script"
setwd(scripts_path)
runa<-parse('a.input&func.r')
eval(runa)
eval(rund)
eval(rune)
eval(rung)
eval(runh)
eval(runi)
setwd(file_path)
eval(runj)
####
catchupSched<-c(328,	90456,	90457,	90459,	68584,	71815,	40,	66831,	83867,	66824,	66825,	37117,	46,
90458,	90455,	101043,	50844,	47,	90454,	52,	66826,	72115,		84552,	66830,	3,	34,	17,	12)
eval(runh)
setwd(file_path)
eval(runj)
library(RODBC)
library(RODBCext)
library(lattice)
library(latticeExtra)
library(dplyr)
library(tidyr)
library(tibble)
library(lubridate)
library(readxl)
library(stringr)
############################## Declare inputs #####################################
#DBserver = 'production'
DBserver = 'rasquery'
CountryCode='USA'
stdInd=3
target_Age = 8
num_threshold = 20
GlobalList<-c(313,	6,	2509,	15,	29,	315,	360,	451,	316,	362)
MoM_cap=0.02
cap_resid_low = 1.02
cap_resid_hi = 1.25
WorstEcon_cap =.98
BestEcon_cap = 1.0005
Econ_gap = 0.15
publishDate<-Sys.Date() - days(day(Sys.Date()))
## file path & read file name
file_path = "C:/Users/vanessa.li/Documents/GitHub/Residual"
setwd(file_path)
excelfile = '20200331 SchedulesManagement.xlsx'
##################################### Load data #####################################
runSQL<-parse('SQLqueries.r')
eval(runSQL)
channel<-odbcConnect(DBserver)
recessionYr.ret<-sqlQuery(channel,recessionYr.ret.sql)
currentYr.ret<-sqlQuery(channel,currentYr.ret.sql)
bestYr.ret<-sqlQuery(channel,bestYr.ret.sql)
sched.aggr<-function(data.df,in.df,stype,target){
retsele.best<-c('Schedule','SaleYear','ModelYear', 'yearAge', 'Units','SPCost')
retsele.other<-c('Schedule','ModelYear', 'yearAge', 'Units','SPCost')
aucsele<-c('Schedule','PublishYear' ,'ModelYear', 'AvgFlv','AvgFmv')
Catlevel<-in.df %>% filter(Level2 =='Category') %>% select(-SubcategoryId,-MakeId)
Subcatlevel<-in.df %>% filter(Level2 == "SubcatGroup") %>% select(-MakeId)
Makelevel<-in.df %>% filter(Level2 =='Make')
if (stype == 'Retail'){
if(target == 'best'){
cat <- merge(data.df,Catlevel, by=c('CategoryId')) %>% select(retsele.best)
subcat <- merge(data.df,Subcatlevel, by=c('CategoryId',"SubcategoryId")) %>% select(retsele.best)
make <- merge(data.df,Makelevel, by=c('CategoryId',"SubcategoryId",'MakeId')) %>% select(retsele.best) }
else{
cat <- merge(data.df,Catlevel, by=c('CategoryId')) %>% select(retsele.other)
subcat <- merge(data.df,Subcatlevel, by=c('CategoryId',"SubcategoryId")) %>% select(retsele.other)
make <- merge(data.df,Makelevel, by=c('CategoryId',"SubcategoryId",'MakeId')) %>% select(retsele.other) }
}
else {
cat <- merge(data.df,Catlevel, by=c('CategoryId')) %>% select(aucsele)
subcat <- merge(data.df,Subcatlevel, by=c('CategoryId',"SubcategoryId")) %>% select(aucsele)
make <- merge(data.df,Makelevel, by=c('CategoryId',"SubcategoryId",'MakeId')) %>% select(aucsele)
}
return(rbind(cat,subcat,make))
}
bestEconfunc<- function(best.df,cur.df,year){
result <- merge(best.df %>% filter(SaleYear ==year),cur.df,by=c('Schedule','yearAge')) %>%
mutate(ratio = avg.x/avg.y, units_N = totalunits.x + totalunits.y) %>%
group_by(Schedule) %>%
summarise(avg.r = sum(units_N * ratio)/sum(units_N),
bestEcon_n = sum(totalunits.x),
current_n = sum(totalunits.y),
sy = year) %>%
filter(bestEcon_n >num_threshold & current_n >num_threshold)
return(result)
}
inherit.fact<-function(df){
col<-c('ClassificationId','avg.r','CS_ClassId', 'C_ClassId')
glob <- merge(merge(df,comb_Out,by='Schedule'), AllClass,by='ClassificationId') %>%
filter(CategoryId.x %in% GlobalList & Level2 =='Category' & !is.na(avg.r)) %>%
summarise(mean(avg.r))
start.df<-merge(merge(df,comb_Out,by='Schedule'), AllClass,by='ClassificationId') %>% select(col)
non_na.df <- start.df %>% filter(!is.na(avg.r))
# M level inherit CS level
m.ih.cs <-merge(start.df %>% filter(is.na(avg.r) & !is.na(CS_ClassId)) %>% select(ClassificationId,CS_ClassId,C_ClassId)
,non_na.df %>% select(c('ClassificationId',avg.r)),by.x='CS_ClassId',by.y='ClassificationId') %>% select(col)
# CSlevel inherit C level
cs.ih.c<- merge(anti_join(start.df,rbind(non_na.df,m.ih.cs),by='ClassificationId') %>% select(-avg.r)
,non_na.df %>% select(c('ClassificationId',avg.r)),by.x='C_ClassId',by.y='ClassificationId') %>% select(col)
# remaining inherit global
ih.glob<- anti_join(start.df,rbind(non_na.df,m.ih.cs,cs.ih.c),by='ClassificationId') %>%
mutate(avg.r = as.factor(glob))
return(rbind(non_na.df,m.ih.cs,cs.ih.c,ih.glob))}
### build a function to do MoM limitation
MoMlimit <- function(last_month,current_month,limit){
upline = last_month + limit
btline = last_month - limit
result = ifelse(is.na(last_month), current_month,pmin(upline,pmax(btline,current_month)))
return(result)
}
################################### Read input file ##########################################
### load the inputfeed file
In<-data.frame(read_excel(excelfile,sheet='In')) %>% filter(Country==CountryCode) %>% select(-ClassificationId,-Plot,-CategoryName,-SubcategoryName,-MakeName,-CSMM,-ValidSchedule)
InR<-data.frame(read_excel(excelfile,sheet='InR')) %>% filter(Country==CountryCode) %>% select(-ClassificationId,-Plot,-CategoryName,-SubcategoryName,-MakeName,-CSMM,-ValidSchedule,-CheckJoin) %>%
filter(BorrowType=='RetailBorrowAuction')
inAll <- rbind(In,InR %>% select(-BorrowSchedule,-BorrowType))
SchedFullList<-inAll %>% select(Schedule) %>% distinct()
Out<-data.frame(read_excel(excelfile,sheet='Out')) %>% filter(Country==CountryCode)
OutR<-data.frame(read_excel(excelfile,sheet='OutR')) %>% filter(Country==CountryCode & str_detect(Schedule,' RbA '))
### Application tab
comb_Out<-rbind(Out %>% select(ClassificationId, Schedule, CategoryId,SubcategoryId, SubcategoryName,Level2,Plot),OutR %>% select(ClassificationId, Schedule, CategoryId,SubcategoryId,SubcategoryName,Level2,Plot))
################################# Retail Econ Factor ###################################
# recession
comb_recession<-sched.aggr(recessionYr.ret,inAll,'Retail','') %>%
group_by(Schedule, yearAge) %>%
summarise(totalunits = sum(Units),
avg = sum(Units*SPCost)/sum(Units))
# best
comb_best<-sched.aggr(bestYr.ret,inAll,'Retail','best')  %>%
group_by(Schedule,SaleYear, yearAge) %>%
summarise(totalunits = sum(Units),
avg = sum(Units*SPCost)/sum(Units))
head(currentYr.ret)
comb_current<-sched.aggr(currentYr.ret,inAll,'Retail','') %>%
group_by(Schedule, ModelYear,SaleMonth) %>%
summarise(totalunits = sum(Units),
avg = sum(Units*SPCost)/sum(Units))
inAll <- rbind(In,InR %>% select(-BorrowSchedule,-BorrowType))
################################### Read input file ##########################################
### load the inputfeed file
In<-data.frame(read_excel(excelfile,sheet='In')) %>% filter(Country==CountryCode) %>% select(-ClassificationId,-Plot,-CategoryName,-SubcategoryName,-MakeName,-CSMM,-ValidSchedule)
InR<-data.frame(read_excel(excelfile,sheet='InR')) %>% filter(Country==CountryCode) %>% select(-ClassificationId,-Plot,-CategoryName,-SubcategoryName,-MakeName,-CSMM,-ValidSchedule,-CheckJoin) %>%
filter(BorrowType=='RetailBorrowAuction')
inAll <- rbind(In,InR %>% select(-BorrowSchedule,-BorrowType))
View(inAll)
MakeSchedOutput
head(MoMSchedules)
head(MoMSchedules %>% select(ClassificationId,ModelYear,limit_fmv),20)
head(MakeSchedOutput)
rbind(Final_makeSched %>% select(ClassificationId,ModelYear,limit_fmv),MoMSchedules %>% select(ClassificationId,ModelYear,limit_fmv))
schedule_form<-rbind(rbind(Final_makeSched %>% select(ClassificationId,ModelYear,limit_fmv),MoMSchedules %>% select(ClassificationId,ModelYear,limit_fmv)) %>%
mutate(ScheduleType = 'FMV') %>% rename(CostPercent = limit_fmv,ClassificationID = ClassificationId),
rbind(Final_makeSched %>% select(ClassificationId,ModelYear,limit_flv),MoMSchedules %>% select(ClassificationId,ModelYear,limit_flv)) %>%
mutate(ScheduleType = 'FLV') %>% rename(CostPercent = limit_flv,ClassificationID = ClassificationId)) %>%
filter(ModelYear>=botyear & ModelYear<=topyear) %>%
mutate(MarketCode = 'GBUK', AppreciationPercentage='', DepreciationPercentage='') %>%
select(MarketCode, ClassificationID,	ScheduleType,	ModelYear, CostPercent, AppreciationPercentage, DepreciationPercentage)
View(schedule_form)
applydep %>% select(ClassificationId,ModelYear,rate)
head(Final_makeSched,20)
head((Final_makeSched %>% slect(-limit_flv)) %>% filter(ModelYear =='Dep') %>% rename(limit_fmv = rate))
head((Final_makeSched %>% select(-limit_flv) %>% filter(ModelYear =='Dep') %>% rename(limit_fmv = rate))
### global
global_out<- rbind(MoMSched.global %>% select(ClassificationId,ModelYear,limit_fmv ) %>%
mutate(ScheduleType = 'FMV') %>% rename(CostPercent = limit_fmv ,ClassificationID = ClassificationId),
MoMSched.global %>% select(ClassificationId,ModelYear,limit_flv ) %>%
mutate(ScheduleType = 'FLV') %>% rename(CostPercent = limit_flv ,ClassificationID = ClassificationId)) %>%
filter(ModelYear>=botyear & ModelYear<=topyear) %>%
mutate(MarketCode = 'GBUK', AppreciationPercentage='', DepreciationPercentage='') %>%
select(MarketCode, ClassificationID,	ScheduleType,	ModelYear, CostPercent, AppreciationPercentage, DepreciationPercentage)
dep_global<-spread(MoMSched.global %>% select(ClassificationId,ModelYear,limit_fmv ),ModelYear,limit_fmv ) %>%
rename(AppreciationPercentage = App, DepreciationPercentage = Dep, ClassificationID = ClassificationId) %>%
mutate(MarketCode = 'GBUK', ScheduleType ='FMV', ModelYear ='', CostPercent='') %>%
select(MarketCode, ClassificationID,	ScheduleType,	ModelYear, CostPercent, AppreciationPercentage, DepreciationPercentage)
app_global<-spread(MoMSched.global %>% select(ClassificationId,ModelYear,limit_flv ),ModelYear,limit_flv) %>%
rename(AppreciationPercentage = App, DepreciationPercentage = Dep, ClassificationID = ClassificationId) %>%
mutate(MarketCode = 'GBUK', ScheduleType ='FLV', ModelYear ='', CostPercent='') %>%
select(MarketCode, ClassificationID,	ScheduleType,	ModelYear, CostPercent, AppreciationPercentage, DepreciationPercentage)
excel_out <- rbind(global_out,dep_global,app_global,schedule_form,dep,app) %>% arrange(MarketCode, ClassificationID,ScheduleType,	ModelYear)
write.csv(excel_out,paste('ClassificationModifySchedule',format(Sys.time(),format='%Y%m%d%H%M'),'VL.csv',sep=''),row.names = F)
}
###################################################################################################################
###################################################################################################################
################################################# 14. PLOTS #######################################################
###################################################################################################################
###################################################################################################################
# split sale data to auction and retail -- Test Data
#SaleData_all=subset(Datainput,as.Date(Datainput$EffectiveDate)>publishDate)
#SaleDtAuc_all<-subset(SaleData_all,SaleData_all$SaleType=="Auction" & YearInuse=='Outputyr')
#SaleDtRet_all<-subset(SaleData_all,SaleData_all$SaleType=="Retail" & YearInuse=='Outputyr')
####### Test Data #######
#Auc_testUse_plot<-SaleDtAuc_all %>%
#  select(Schedule,Age,ModelYear,SaleAB)
#Ret_testUse_plot<-SaleDtRet_all %>%
#  select(Schedule,Age,ModelYear,SaleAB)
#################################### 14.A Cat/Subcat Schedules #############################################
###### Validation Data #######
Auc_ValidDt_plot<-Data_all_plot %>%
filter(SaleType =='Auction' & as.Date(EffectiveDate)>=thirdLastM & ModelYear>=dep_endyr) %>%
select(SaleType,Schedule,Age,ModelYear,SaleAB)
Ret_ValidDt_plot<-Data_all_plot %>%
filter(SaleType !='Auction' & as.Date(EffectiveDate)>=thirdLastM & ModelYear>=dep_endyr) %>%
select(SaleType,Schedule,Age,ModelYear,SaleAB)
###### regression line this month #####
Regression_ret<-OutRegression_Ret %>%
select(Schedule,ModelYear,fmv) %>%
mutate(Age= year(publishDate)-ModelYear + (month(publishDate)-6)/12.00)
Regression_auc<-OutRegression_Auc %>%
select(Schedule,ModelYear,flv) %>%
mutate(Age= year(publishDate)-ModelYear + (month(publishDate)-6)/12.00)
###### Schedule this month #####
New_Sched<-MoMSchedules %>%
filter(Plot=='Y') %>%
select(Schedule,ClassificationId,ModelYear,Adjfmv,Adjflv,limit_fmv,limit_flv) %>%
mutate(Age= year(publishDate)-ModelYear + (month(publishDate)-6)/12.00)
###### Schedule last month #####
Last_Sched <- MoMSchedules %>%
filter(Plot=='Y') %>%
select(Schedule,ClassificationId,ModelYear, CurrentFmv,CurrentFlv) %>%
mutate(Age= year(publishDate)-ModelYear + (month(publishDate)-6)/12.00-1/12.00)
##### depreciation lines
Deprline<-deprCurve %>% mutate(Age= year(publishDate)-ModelYear + (month(publishDate)-6)/12.00)
#SchedFullList_plot = SchedFullList %>% filter(Schedule %in% c('Telehandlers Small JLG USA'))
SchedFullList_plot = SchedFullList %>% filter(!str_detect(Schedule,'SubcatGrp'))
#SchedFullList_plot = SchedFullList %>% filter(Schedule=='Containers Tanks Boxes RbA Trailers Grp USA')
N_plot=dim(SchedFullList_plot)[1]
for (j in 1:N_plot){
###### Dots - Regression Data
Auc_RegDt <- Data_all_plot %>% filter(SaleType =='Auction' & Schedule==SchedFullList_plot[j,1])
Ret_RegDt <- Data_all_plot %>% filter(SaleType !='Auction' & Schedule==SchedFullList_plot[j,1])
if (CountryCode=='USA'){
listing_RegDt<-subset(Data_all_plot,Data_all_plot$SaleType=='Listing' & Data_all_plot$Schedule==SchedFullList_plot[j,1])
}
###### Dots - Adjsuted Data
Auc_ValidDt<-subset(Auc_ValidDt_plot,Auc_ValidDt_plot$Schedule==SchedFullList_plot[j,1])
Ret_ValidDt<-subset(Ret_ValidDt_plot,Ret_ValidDt_plot$SaleType=='Retail' & Ret_ValidDt_plot$Schedule==SchedFullList_plot[j,1])
###### Lines - Final -this month
NewMonth_Sched<-subset(New_Sched,New_Sched$Schedule==SchedFullList_plot[j,1])
###### Lines - Final -last month
PrevMonth_Sched<-subset(Last_Sched,Last_Sched$Schedule==SchedFullList_plot[j,1])
###### Lines - Regression Data
AucRegression<-subset(Regression_auc,Regression_auc$Schedule==SchedFullList_plot[j,1])
RetRegression<-subset(Regression_ret,Regression_ret$Schedule==SchedFullList_plot[j,1])
###### Lines - depreciation
DrawDepreciation<- subset(Deprline, Deprline$Schedule==SchedFullList_plot[j,1])
xaxis = c(-.5,15)
yaxis = c(0,2)
yaxis_name='SP /AB Cost'
##Auction Plots
# lines
draw_Sched_Auc<-xyplot(limit_flv ~ Age, NewMonth_Sched,ylim=yaxis,xlim=xaxis,scales = list(y=list(tick.number=10),x=list(tick.number=16))
,type=c('p','l','g'),col='dodgerblue3',lwd=3,pch=4,cex=1.5, lty=1
,ylab = yaxis_name, main=list(label=paste(SchedFullList_plot[j,1],' - ' ,publishDate),font=2,cex=2)
,panel = function(x,y,...){
panel.abline(v = 0:14, h = seq(0,2,.5), col="lightgrey")
panel.xyplot(x, y, ...)
})
draw_lastM_Auc<-xyplot(CurrentFlv ~ Age, PrevMonth_Sched,ylim=yaxis,xlim=xaxis,type=c('p','l'),lty=3,col='dodgerblue3',ylab = yaxis_name,lwd=3,pch=4,cex=1.5)
draw_regLine_Auc<-xyplot(flv ~ Age, AucRegression,ylim=yaxis,xlim=xaxis,scales = list(y=list(tick.number=10),x=list(tick.number=1116))
,type=c("l","g"),col='dodgerblue3',lwd=1.5,lty=1,cex=1,
ylab = yaxis_name,main=list(label=paste(SchedFullList_plot[j,1],' - ',publishDate),font=2,cex=2))
draw_depr_Auc<-xyplot(depflv ~ Age, DrawDepreciation,ylim=yaxis,xlim=xaxis,ylab = yaxis_name,type=c('p','l','g'),col='dodgerblue3',lwd=3,pch=4,cex=1.5, lty=1)
#dots
draw_RegDt_Auc<-xyplot(SaleAB ~ Age, Auc_RegDt,pch=20,cex=1.5,ylim=yaxis,xlim=xaxis,ylab = yaxis_name,col="deepskyblue1")
draw_ValidDt_Auc<-xyplot(SaleAB ~ Age , Auc_ValidDt, pch=20,cex=1.5,ylim=yaxis,xlim=xaxis,ylab = yaxis_name,col="dodgerblue3")
##Retail Plots
#lines
draw_Sched_Ret<-xyplot(limit_fmv ~ Age, NewMonth_Sched,ylim=yaxis,xlim=xaxis,scales = list(y=list(tick.number=10),x=list(tick.number=16))
,type=c('p','l','g'),col='firebrick2',lwd=3,pch=4,cex=1.5,lty=1,
ylab = yaxis_name,main=list(label=paste(SchedFullList_plot[j,1],' - ' ,publishDate),font=2,cex=2))
draw_lastM_Ret<-xyplot(CurrentFmv ~ Age, PrevMonth_Sched,ylim=yaxis,xlim=xaxis,type=c('p','l'),lty=3,col='firebrick2',ylab = yaxis_name,lwd=3,pch=4,cex=1.5)
draw_regLine_Ret<-xyplot(fmv ~ Age, RetRegression,ylim=yaxis,xlim=xaxis,scales = list(y=list(tick.number=10),x=list(tick.number=16))
,type=c("l","g"),col='firebrick2',lwd=1.5,lty=1,cex=1,
ylab = yaxis_name,main=list(label=paste(SchedFullList_plot[j,1],' - ',publishDate),font=2,cex=2))
draw_depr_Ret<-xyplot(depfmv ~ Age, DrawDepreciation,ylim=yaxis,xlim=xaxis,ylab = yaxis_name,type=c('p','l','g'),col='firebrick2',lwd=3,pch=4,cex=1.5, lty=1)
#dots
draw_RegDt_Ret<-xyplot(SaleAB ~ Age, Ret_RegDt,pch=20,cex=1.5,ylim=yaxis,xlim=xaxis,ylab = yaxis_name,col="lightpink")
draw_ValidDt_Ret<-xyplot(SaleAB ~ Age , Ret_ValidDt, pch=20,cex=1.5,ylim=yaxis,xlim=xaxis,ylab = yaxis_name,col='firebrick2')
if (CountryCode=='USA'){
draw_RegDt_List<-xyplot(SaleAB ~ Age , listing_RegDt, pch=20,cex=1.5,ylim=yaxis,xlim=xaxis,ylab = yaxis_name,col='darkgreen')
# listdt<-xyplot(SaleAB ~ Age, list, pch=20,cex=1.5,ylim=yaxis,xlim=xaxis,ylab = yaxis_name,col='lightgreen',main=list(label=paste(SchedFullList_plot[j,1],' - ',publishDate),font=2,cex=2))
}
### Draw retail and auction in one chart
if (CountryCode=='USA'){
draw<- draw_regLine_Ret + as.layer(draw_Sched_Ret)  +as.layer(draw_lastM_Ret) + as.layer(draw_RegDt_Auc)+ as.layer(draw_RegDt_Ret) + as.layer(draw_depr_Ret) + as.layer(draw_depr_Auc) + as.layer(draw_ValidDt_Ret)+ as.layer(draw_regLine_Auc) + as.layer(draw_Sched_Auc) + as.layer(draw_lastM_Auc) + as.layer(draw_ValidDt_Auc) + as.layer(draw_RegDt_List)
} else{
draw<- draw_regLine_Ret + as.layer(draw_Sched_Ret)  +as.layer(draw_lastM_Ret) + as.layer(draw_RegDt_Auc)+ as.layer(draw_RegDt_Ret) + as.layer(draw_depr_Ret) + as.layer(draw_depr_Auc) + as.layer(draw_ValidDt_Ret)+ as.layer(draw_regLine_Auc) + as.layer(draw_Sched_Auc) + as.layer(draw_lastM_Auc) + as.layer(draw_ValidDt_Auc)
}
#draw<- draw_regLine_Ret +as.layer(draw_ValidDt_Ret)+ as.layer(draw_regLine_Auc) +as.layer(draw_ValidDt_Auc) + as.layer(draw_RegDt_Auc)+ as.layer(draw_RegDt_Ret)
#draw<- listdt+ as.layer(draw_RegDt_Ret) +as.layer(draw_RegDt_List)
#### save
mypath<-file.path(file_path,plotFolder,paste(SchedFullList_plot[j,1] ,".png"))
png(file=mypath,width=1600,height=1200)
print(draw)
dev.off()
}
head(Final_makeSched %>% select(-limit_flv) %>% filter(ModelYear =='Dep') %>% rename(limit_fmv = rate))
head(Final_makeSched %>% select(-limit_flv) %>% filter(ModelYear =='Dep') %>% rename(rate = limit_fmv))
app<-spread(rbind(applydep %>% select(ClassificationId,ModelYear,rate),head(Final_makeSched %>% select(-limit_flv) %>% filter(ModelYear =='App') %>% rename(rate = limit_fmv)))
,ModelYear,rate) %>%
rename(AppreciationPercentage = App, DepreciationPercentage = Dep, ClassificationID = ClassificationId) %>%
mutate(MarketCode = 'GBUK', ScheduleType ='FLV', ModelYear ='', CostPercent='') %>%
select(MarketCode, ClassificationID,	ScheduleType,	ModelYear, CostPercent, AppreciationPercentage, DepreciationPercentage)
View(app)
spread(rbind(applydep %>% select(ClassificationId,ModelYear,rate),head(Final_makeSched %>% select(-limit_flv) %>% filter(ModelYear =='App') %>% rename(rate = limit_fmv)))
,ModelYear,rate)
rbind(applydep %>% select(ClassificationId,ModelYear,rate)
,"")
applydep %>% select(ClassificationId,ModelYear,rate)
head(Final_makeSched %>% select(-limit_flv) %>% filter(ModelYear =='Dep') %>% rename(rate = limit_fmv))
head(Final_makeSched %>% select(-limit_flv)  %>% rename(rate = limit_fmv))
app<-spread(rbind(applydep %>% select(ClassificationId,ModelYear,rate),head(Final_makeSched %>% select(-limit_flv) %>% filter(ModelYear %in% c('App','Dep')) %>% rename(rate = limit_fmv)))
,ModelYear,rate) %>%
rename(AppreciationPercentage = App, DepreciationPercentage = Dep, ClassificationID = ClassificationId) %>%
mutate(MarketCode = 'GBUK', ScheduleType ='FLV', ModelYear ='', CostPercent='') %>%
select(MarketCode, ClassificationID,	ScheduleType,	ModelYear, CostPercent, AppreciationPercentage, DepreciationPercentage)
View(app)
depapp.make<-Final_makeSched %>% select(-limit_flv) %>% filter(ModelYear %in% c('App','Dep')) %>% rename(rate = limit_fmv)
dep<-spread(rbind(applydep %>% select(ClassificationId,ModelYear,rate),depapp.make),ModelYear,rate) %>%
rename(AppreciationPercentage = App, DepreciationPercentage = Dep, ClassificationID = ClassificationId) %>%
mutate(MarketCode = 'GBUK', ScheduleType ='FMV', ModelYear ='', CostPercent='') %>%
select(MarketCode, ClassificationID,	ScheduleType,	ModelYear, CostPercent, AppreciationPercentage, DepreciationPercentage)
app<-spread(rbind(applydep %>% select(ClassificationId,ModelYear,rate),depapp.make),ModelYear,rate) %>%
rename(AppreciationPercentage = App, DepreciationPercentage = Dep, ClassificationID = ClassificationId) %>%
mutate(MarketCode = 'GBUK', ScheduleType ='FLV', ModelYear ='', CostPercent='') %>%
select(MarketCode, ClassificationID,	ScheduleType,	ModelYear, CostPercent, AppreciationPercentage, DepreciationPercentage)
View(app)
schedule_form<-rbind(rbind(Final_makeSched %>% select(ClassificationId,ModelYear,limit_fmv),MoMSchedules %>% select(ClassificationId,ModelYear,limit_fmv)) %>%
mutate(ScheduleType = 'FMV') %>% rename(CostPercent = limit_fmv,ClassificationID = ClassificationId),
rbind(Final_makeSched %>% select(ClassificationId,ModelYear,limit_flv),MoMSchedules %>% select(ClassificationId,ModelYear,limit_flv)) %>%
mutate(ScheduleType = 'FLV') %>% rename(CostPercent = limit_flv,ClassificationID = ClassificationId)) %>%
filter(ModelYear>=botyear & ModelYear<=topyear) %>%
mutate(MarketCode = 'GBUK', AppreciationPercentage='', DepreciationPercentage='') %>%
select(MarketCode, ClassificationID,	ScheduleType,	ModelYear, CostPercent, AppreciationPercentage, DepreciationPercentage)
View(schedule_form)
excel_out <- rbind(global_out,dep_global,app_global,schedule_form,dep,app) %>% arrange(MarketCode, ClassificationID,ScheduleType,	ModelYear)
write.csv(excel_out,paste('ClassificationModifySchedule',format(Sys.time(),format='%Y%m%d%H%M'),'VL.csv',sep=''),row.names = F)
setwd("~/GitHub/Schedules/doc")
write.csv(excel_out,paste('ClassificationModifySchedule',format(Sys.time(),format='%Y%m%d%H%M'),'VL.csv',sep=''),row.names = F)
fixChannel_Make<-assignValMake %>%
select(ClassificationId, Schedule, CategoryId,MakeName,ModelYear,chann,chann2) %>%
rename(limit_fmv=chann,limit_flv=chann2)
fixChannel_Make %>%
arrange(ClassificationId,ModelYear)%>%
mutate(rate = limit_fmv/limit_flv) %>%
filter (rate < 1)
######################################################### Year over year check on Tier 1 & 2 ##########################################################
fixYear_Make = fixChannel_Make %>% arrange(ClassificationId,desc(ModelYear))
for (i in 1:dim(fixYear_Make)[1]){
fixYear_Make$limit_fmv_temp[i] =
if (i == 1) {fixYear_Make$limit_fmv[i]}
else{
if(fixYear_Make$ClassificationId[i] == fixYear_Make$ClassificationId[i-1] & fixYear_Make$ModelYear[i] == botyear+1
& fixYear_Make$limit_fmv[i-1] / fixYear_Make$limit_fmv[i] <1.02){
fixYear_Make$limit_fmv[i-1] /1.02
}
else{
fixYear_Make$limit_fmv[i]
}
}
fixYear_Make$limit_flv_temp[i] =
if(i==1){fixYear_Make$limit_flv[i]}
else{
if(fixYear_Make$ClassificationId[i] == fixYear_Make$ClassificationId[i-1] & fixYear_Make$ModelYear[i] == botyear+1
& fixYear_Make$limit_flv[i-1] / fixYear_Make$limit_flv[i] <1.02){
fixYear_Make$limit_flv[i-1] /1.02
}
else{
fixYear_Make$limit_flv[i]
}
}
}
fixYear_Make =fixYear_Make %>% select(-limit_fmv ,-limit_flv) %>% rename(limit_fmv=limit_fmv_temp ,  limit_flv=limit_flv_temp)
for (i in 1:nrow(fixYear_Make)){
fixYear_Make$retFlag[i] = ifelse(fixYear_Make$ClassificationId[i]==fixYear_Make$ClassificationId[i+1],
ifelse(round(as.numeric(fixYear_Make$limit_fmv[i])/as.numeric(fixYear_Make$limit_fmv[i+1]),digits=4)<1,"flag",""),"")
fixYear_Make$aucFlag[i]= ifelse(fixYear_Make$ClassificationId[i]==fixYear_Make$ClassificationId[i+1],
ifelse(round(fixYear_Make$limit_flv[i]/fixYear_Make$limit_flv[i+1],digits=4)<1,"flag",""),"")
}
### issued classifications on year
fixYear_Make %>% filter(retFlag=='flag' |aucFlag=='flag')
MakeIssYear<-fixYear_Make %>% filter(retFlag=='flag' |aucFlag=='flag') %>% select(ClassificationId)
fixChannel_Make<-assignValMake %>%
select(ClassificationId, Schedule, CategoryId,MakeName,ModelYear,chann,chann2) %>%
rename(limit_fmv=chann,limit_flv=chann2)
fixChannel_Make %>%
arrange(ClassificationId,ModelYear)%>%
mutate(rate = limit_fmv/limit_flv) %>%
filter (rate < 1)
thredtpts
rate_updt
makeSFupp
thredtpts
