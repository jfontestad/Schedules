runb<-parse('b.sqlQueries_US.r')
eval(runb)
publishDate <- Sys.Date() - days(day(Sys.Date()))
uploadData <- sqlQuery(channel,US_dataload)
uploadListing <- sqlQuery(channel,Listing_dataload)
MakeAdjData <- sqlExecute(channel,MakeAdjust_dataload,CategoryId, fetch=T)
LastMonth_Sched <- sqlQuery(channel,LM_USA_load)
LastMonth_depr <- sqlQuery(channel,Last_depr_USAload)
AllClass <- sqlQuery(channel,AllClass)
ReportGrp <-sqlQuery(channel,ReportGrp)
} else{
setwd(scripts_path)
runb<-parse('b.sqlQueries_UK.r')
eval(runb)
publishDate <- Sys.Date() - days(day(Sys.Date())) - days(day(Sys.Date() - days(day(Sys.Date()))))
uploadData <- sqlQuery(channel,UK_dataload)
#listingData <- sqlQuery(channel,Listing_dataload)
MakeAdjData <- sqlExecute(channel,MakeAdjust_dataloadUK,CategoryId, fetch=T)
LastMonth_Sched <- sqlQuery(channel,LM_UK_load)
LastMonth_depr <- sqlQuery(channel,Last_depr_UKload)
AllClass <- sqlQuery(channel,AllClass)
ReportGrp <-sqlQuery(channel,ReportGrp)
}
end_time_dtload <- Sys.time()
end_time_dtload - starttime_dtload
excelfile = '20200811 SchedulesManagement_test.xlsx'
plotFolder = paste("Plots",Sys.Date())
dir.create(plotFolder)
excelfile = '20200811 SchedulesManagement_test.xlsx'
plotFolder = paste("Plots",Sys.Date())
## set directory of r scripts
scripts_path = "C:/Users/vanessa.li/Documents/GitHub/Schedules/script"
setwd(scripts_path)
runa<-parse('a.input&func.r')
eval(runa)
runc<-parse('c.listings.r')
rund<-parse('d.datacleaning.r')
rune<-parse('e.buildmodel.r')
runf<-parse('f.adjustment.r')
rung<-parse('g.violationcheck.r')
runh<-parse('h. depreciation&monthlimit.r')
runi<-parse('i.makeschedules.r')
runj<-parse('j.upload&plots.r')
## Execute
## USA
start_time_r <- Sys.time()
if (CountryCode == 'USA'){
eval(runc)
print('Listing is done')
eval(rund)
print('Data cleaning is done')
eval(rune)
print('Stats model is done')
eval(runf)
print('Adjustments is done')
eval(rung)
print('Violation check is done')
eval(runh)
print('Depreciation and MoM are done')
eval(runi)
print('Make Adjusters is done')
setwd(file_path)
eval(runj)
print('Plots generation is done')
setwd(file_path)
write.xlsx2(as.data.frame(joinMakeOut),file = paste(publishDate,CountryCode," Share.xlsx"), sheetName = 'MakeAdjusters',row.names = F)
write.xlsx2(as.data.frame(MakeSFcalc_Sched),file = paste(publishDate,CountryCode," Share.xlsx"), sheetName = 'MakeAdjCalc',append=T,row.names = F)
write.xlsx2(as.data.frame(list_reductfact),file = paste(publishDate,CountryCode," Share.xlsx"), sheetName = 'ListingReduction',append=T,row.names = F)
write.xlsx(regressionCoef,file = paste(publishDate, 'Coefficients.xlsx'), sheetName='Sheet1',row.names=F)
} else{
eval(rund)
print('Data cleaning is done')
eval(rune)
print('Stats model is done')
eval(runf)
print('Adjustments is done')
eval(rung)
print('Violation check is done')
eval(runh)
print('Depreciation and MoM are done')
eval(runi)
print('Make Adjusters is done')
setwd(file_path)
eval(runj)
write.xlsx2(as.data.frame(joinMakeOut),file = paste(publishDate,CountryCode," Share.xlsx"), sheetName = 'MakeAdjusters',row.names = F)
write.xlsx2(as.data.frame(MakeSFcalc_Sched),file = paste(publishDate,CountryCode," Share.xlsx"), sheetName = 'MakeAdjCalc',append=T,row.names = F)
write.xlsx(regressionCoef,file = paste(publishDate, 'Coefficients.xlsx'), sheetName='Sheet1',row.names=F)
}
end_time_r <- Sys.time()
end_time_r - start_time_r
fit<-lm(SaleAB ~ Age,data = groupData)
View(groupData)
View(SaleDtAuc_cd)
for (j in 1:nSched_Auc){
groupData<-SaleDtAuc_cd %>% filter(Schedule==auc_regression[j,1])
fit<-lm(SaleAB ~ Age,data = groupData)
cooksd <- cooks.distance(fit)
influential <- as.numeric(names(cooksd)[(cooksd > 40*mean(cooksd, na.rm=T) | cooksd >1)])
leveragelist[[j]]<-groupData[influential,]
}
leveragelist
cooksd <- cooks.distance(fit)
cooks.distance(fit)
## read input excel file and create a plot for storing the plots
file_path = "C:/Users/vanessa.li/Documents/GitHub/Schedules/doc"
setwd(file_path)
excelfile = '20200811 SchedulesManagement_test.xlsx'
plotFolder = paste("Plots",Sys.Date())
dir.create(plotFolder)
## set directory of r scripts
scripts_path = "C:/Users/vanessa.li/Documents/GitHub/Schedules/script"
setwd(scripts_path)
runa<-parse('a.input&func.r')
eval(runa)
runc<-parse('c.listings.r')
rund<-parse('d.datacleaning.r')
rune<-parse('e.buildmodel.r')
runf<-parse('f.adjustment.r')
rung<-parse('g.violationcheck.r')
runh<-parse('h. depreciation&monthlimit.r')
runi<-parse('i.makeschedules.r')
runj<-parse('j.upload&plots.r')
setwd(scripts_path)
runc<-parse('c.listings.r')
rund<-parse('d.datacleaning.r')
rune<-parse('e.buildmodel.r')
runf<-parse('f.adjustment.r')
rung<-parse('g.violationcheck.r')
runh<-parse('h. depreciation&monthlimit.r')
runi<-parse('i.makeschedules.r')
runj<-parse('j.upload&plots.r')
## Execute
## USA
start_time_r <- Sys.time()
eval(runc)
print('Listing is done')
eval(rund)
print('Data cleaning is done')
eval(rune)
eval(runf)
print('Adjustments is done')
eval(rung)
print('Violation check is done')
eval(runh)
print('Depreciation and MoM are done')
eval(runi)
print('Make Adjusters is done')
setwd(file_path)
eval(runj)
print('Plots generation is done')
setwd(file_path)
write.xlsx2(as.data.frame(joinMakeOut),file = paste(publishDate,CountryCode," Share.xlsx"), sheetName = 'MakeAdjusters',row.names = F)
write.xlsx2(as.data.frame(MakeSFcalc_Sched),file = paste(publishDate,CountryCode," Share.xlsx"), sheetName = 'MakeAdjCalc',append=T,row.names = F)
write.xlsx2(as.data.frame(list_reductfact),file = paste(publishDate,CountryCode," Share.xlsx"), sheetName = 'ListingReduction',append=T,row.names = F)
write.xlsx(regressionCoef,file = paste(publishDate, 'Coefficients.xlsx'), sheetName='Sheet1',row.names=F)
write.csv(OutRegression_Ret,"OutRegression_Ret.csv")
## US retail & auction data load
US_dataload<-"SET NOCOUNT ON
Declare @dateStart DATE = CAST(DATEADD(MONTH, DATEDIFF(MONTH, -1, DATEADD(year,-1,GETDATE()))-1, -1) as date)
Declare @dateEnd DATE = CAST(DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())-1, -1) AS date)
Declare @topyear INT = 2020
Declare @compingyr INT = @topyear+1
Declare @botyear INT =  @compingyr-10
Declare @ext_botYr INT = @compingyr-12
Declare @dep_endyr INT = @compingyr-15
Declare @year_20 INT = @topyear-20
Declare @intercept_RetLow decimal(10,1) = 0.5
Declare @intercept_AucLow decimal(10,1) = 0.3
Declare @intercept_RetHi decimal(10,1) = 1.5
Declare @intercept_AucHi decimal(10,1) = 1.2
Declare @denom_low decimal(10,1) =4.0
Declare @denom_hi decimal(10,1) =25.0
SELECT
CASE WHEN SaleType='Retail' THEN CustomerAssetId
WHEN SaleType='Auction' THEN InternetComparableId END AS CompId
,[EquipmentTypeId]
,[CategoryId]
,[CategoryName]
,[SubcategoryId]
,[SubcategoryName]
,[MakeId]
,[MakeName]
,[ModelId]
,[ModelName]
,[ModelYear]
,SaleDate
,CASE WHEN AcquisitionDate IS NULL THEN datefromparts(ModelYear, 7, 1)
ELSE AcquisitionDate END AS AcquisitionDate
,EOMONTH(SaleDate) as EffectiveDate
,[SalePriceSF] as [SalePrice]
,SaleType
,MilesHours
,MilesHoursCode
,[M1AppraisalBookPublishDate]
,CASE WHEN SaleType='Retail' THEN M1PrecedingFmv
WHEN SaleType='Auction' THEN M1PrecedingFlv END AS M1Value
,CurrentABCostUSNA as CurrentABCost
,[SalePriceSF]/CurrentABCostUSNA AS [SaleAB]
,CASE WHEN SaleType='Retail' THEN SalePriceSF/M1PrecedingFmv
WHEN SaleType='Auction' THEN SalePriceSF/M1PrecedingFlv END AS SPvalue
,cast(YEAR(SaleDate)-ModelYear + (MONTH(SaleDate)-6)/12.00 as decimal(10,4))  as Age
,'USA' as Country
,CASE
WHEN SaleType='Retail' AND ([SalePriceSF]/CurrentABCostUSNA < @intercept_RetLow - (@intercept_RetLow*(YEAR(SaleDate)-ModelYear + (MONTH(SaleDate)-6)/12.00))/@denom_low
OR [SalePriceSF]/CurrentABCostUSNA > @intercept_RetHi - (@intercept_RetHi*(YEAR(SaleDate)-ModelYear + (MONTH(SaleDate)-6)/12.00))/@denom_hi) THEN 'EcxRegr'
WHEN SaleType='Auction' AND ([SalePriceSF]/CurrentABCostUSNA < @intercept_AucLow - (@intercept_AucLow*(YEAR(SaleDate)-ModelYear + (MONTH(SaleDate)-6)/12.00))/@denom_low
OR [SalePriceSF]/CurrentABCostUSNA > @intercept_AucHi - (@intercept_AucHi*(YEAR(SaleDate)-ModelYear + (MONTH(SaleDate)-6)/12.00))/@denom_hi)THEN 'EcxRegr'
ELSE 'inUse' END AS 'Flag'
,CASE WHEN Modelyear < @botyear or Modelyear >@topyear THEN 'ExtYrs' ELSE 'AdjusUseYr' END AS 'YearFlag'
FROM [ras_sas].[BI].[Comparables]
WHERE
( ([source]='internet'
AND NOT ((AuctioneerClassification LIKE '%unused%' OR [Description] LIKE '%unused%') AND (SaleYear - ModelYear > 1))
AND NOT (auctioneer = 'Alex Lyon & Son' and age between 0 and 24)
AND NOT ([Description] like '%reman%' or [Description] like '%refurb%' or [Description] like '%recon%'))
OR ([source]='internet' AND (AuctioneerClassification IS NULL OR [Description] IS  NULL)
AND NOT (auctioneer = 'Alex Lyon & Son' and age between 0 and 24) )
OR (SaleType='retail' AND IsUsedForComparablesUSNA='Y'
--AND [MilesHours]>=100
))
AND CategoryId Not In (220,	1948,	18,	4,	1949,	234,	21,	31,	2733,	2706,	2718,	2692,	2724,	2674,	2700,	2708)
AND MakeId NOT in (58137,78) --Miscellaneous,Not Attributed
AND NOT ([SubcategoryId] in (2806,2808,2001,2636) and makeid=31 and ModelName not like 'XQ%')
AND NOT (modelid = 40413)
AND SaleDate >@dateStart AND saledate<=@dateEnd
--and categoryid in (453)
--AND SaleDate >='2018-09-01' AND saledate<='2019-08-31'
AND ModelYear <= @compingyr
and ModelYear>= CASE WHEN categoryid in (2605,2603,2608,2604,2606)  THEN @year_20 ELSE @dep_endyr END
AND [SalePriceSF]>100
AND CurrentABCostUSNA is not NULL
AND M1PrecedingFmv IS NOT NULL
AND M1PrecedingFlv IS NOT NULL
AND M1PrecedingABCostUSNA is not NULL
AND Option15 is NULL "
uploadData <- sqlQuery(channel,US_dataload)
runc<-parse('c.listings.r')
rund<-parse('d.datacleaning.r')
rune<-parse('e.buildmodel.r')
runf<-parse('f.adjustment.r')
rung<-parse('g.violationcheck.r')
runh<-parse('h. depreciation&monthlimit.r')
runi<-parse('i.makeschedules.r')
runj<-parse('j.upload&plots.r')
####
#publishDate = as.Date('2019-08-31')
thirdLastM<-as.Date(publishDate%m-% months(1)- days(day(publishDate)))
sixLastM<-as.Date(publishDate%m-% months(5)- days(day(publishDate)))
setwd(scripts_path)
## Read the R script
runc<-parse('c.listings.r')
rund<-parse('d.datacleaning.r')
rune<-parse('e.buildmodel.r')
runf<-parse('f.adjustment.r')
rung<-parse('g.violationcheck.r')
runh<-parse('h. depreciation&monthlimit.r')
runi<-parse('i.makeschedules.r')
runj<-parse('j.upload&plots.r')
## Execute
## USA
start_time_r <- Sys.time()
if (CountryCode == 'USA'){
eval(runc)
print('Listing is done')
eval(rund)
print('Data cleaning is done')
eval(rune)
print('Stats model is done')
eval(runf)
print('Adjustments is done')
eval(rung)
print('Violation check is done')
eval(runh)
print('Depreciation and MoM are done')
eval(runi)
print('Make Adjusters is done')
setwd(file_path)
eval(runj)
print('Plots generation is done')
setwd(file_path)
write.xlsx2(as.data.frame(joinMakeOut),file = paste(publishDate,CountryCode," Share.xlsx"), sheetName = 'MakeAdjusters',row.names = F)
write.xlsx2(as.data.frame(MakeSFcalc_Sched),file = paste(publishDate,CountryCode," Share.xlsx"), sheetName = 'MakeAdjCalc',append=T,row.names = F)
write.xlsx2(as.data.frame(list_reductfact),file = paste(publishDate,CountryCode," Share.xlsx"), sheetName = 'ListingReduction',append=T,row.names = F)
write.xlsx(regressionCoef,file = paste(publishDate, 'Coefficients.xlsx'), sheetName='Sheet1',row.names=F)
} else{
eval(rund)
print('Data cleaning is done')
eval(rune)
print('Stats model is done')
eval(runf)
print('Adjustments is done')
eval(rung)
print('Violation check is done')
eval(runh)
print('Depreciation and MoM are done')
eval(runi)
print('Make Adjusters is done')
setwd(file_path)
eval(runj)
write.xlsx2(as.data.frame(joinMakeOut),file = paste(publishDate,CountryCode," Share.xlsx"), sheetName = 'MakeAdjusters',row.names = F)
write.xlsx2(as.data.frame(MakeSFcalc_Sched),file = paste(publishDate,CountryCode," Share.xlsx"), sheetName = 'MakeAdjCalc',append=T,row.names = F)
write.xlsx(regressionCoef,file = paste(publishDate, 'Coefficients.xlsx'), sheetName='Sheet1',row.names=F)
}
end_time_r <- Sys.time()
end_time_r - start_time_r
setwd(file_path)
plotFolder = paste("Plots",Sys.Date())
dir.create(plotFolder)
setwd(file_path)
eval(runj)
write.xlsx2(as.data.frame(joinMakeOut),file = paste(publishDate,CountryCode," Share.xlsx"), sheetName = 'MakeAdjusters',row.names = F)
write.xlsx2(as.data.frame(MakeSFcalc_Sched),file = paste(publishDate,CountryCode," Share.xlsx"), sheetName = 'MakeAdjCalc',append=T,row.names = F)
write.xlsx2(as.data.frame(list_reductfact),file = paste(publishDate,CountryCode," Share.xlsx"), sheetName = 'ListingReduction',append=T,row.names = F)
write.xlsx(regressionCoef,file = paste(publishDate, 'Coefficients.xlsx'), sheetName='Sheet1',row.names=F)
write.csv(OutRegression_Ret,"OutRegression_Ret.csv")
View(EDAview.N)
View(EDAview.N.trans)
write.xlsx2(as.data.frame(EDAview.N.trans),file = paste(publishDate,CountryCode," EDA.xlsx"),sheetName = 'NumUnits',row.names =F)
write.xlsx2(as.data.frame(EDAview.mean.trans),file = paste(publishDate,CountryCode," EDA.xlsx"),sheetName = 'SPValMean',row.names =F,append=T)
## US retail & auction data load
US_dataload<-"SET NOCOUNT ON
Declare @dateStart DATE = CAST(DATEADD(MONTH, DATEDIFF(MONTH, -1, DATEADD(year,-1,GETDATE()))-1, -1) as date)
Declare @dateEnd DATE = CAST(DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())-1, -1) AS date)
Declare @topyear INT = 2020
Declare @compingyr INT = @topyear+1
Declare @botyear INT =  @compingyr-10
Declare @ext_botYr INT = @compingyr-12
Declare @dep_endyr INT = @compingyr-15
Declare @year_20 INT = @topyear-20
Declare @intercept_RetLow decimal(10,1) = 0.5
Declare @intercept_AucLow decimal(10,1) = 0.3
Declare @intercept_RetHi decimal(10,1) = 1.5
Declare @intercept_AucHi decimal(10,1) = 1.2
Declare @denom_low decimal(10,1) =4.0
Declare @denom_hi decimal(10,1) =25.0
SELECT
CASE WHEN SaleType='Retail' THEN CustomerAssetId
WHEN SaleType='Auction' THEN InternetComparableId END AS CompId
,[EquipmentTypeId]
,[CategoryId]
,[CategoryName]
,[SubcategoryId]
,[SubcategoryName]
,[MakeId]
,[MakeName]
,[ModelId]
,[ModelName]
,[ModelYear]
,SaleDate
,CASE WHEN AcquisitionDate IS NULL THEN datefromparts(ModelYear, 7, 1)
ELSE AcquisitionDate END AS AcquisitionDate
,EOMONTH(SaleDate) as EffectiveDate
,[SalePriceSF] as [SalePrice]
,SaleType
,MilesHours
,MilesHoursCode
,[M1AppraisalBookPublishDate]
,CASE WHEN SaleType='Retail' THEN M1PrecedingFmv
WHEN SaleType='Auction' THEN M1PrecedingFlv END AS M1Value
,CurrentABCostUSNA as CurrentABCost
,[SalePriceSF]/CurrentABCostUSNA AS [SaleAB]
,CASE WHEN SaleType='Retail' THEN SalePriceSF/M1PrecedingFmv
WHEN SaleType='Auction' THEN SalePriceSF/M1PrecedingFlv END AS SPvalue
,cast(YEAR(SaleDate)-ModelYear + (MONTH(SaleDate)-6)/12.00 as decimal(10,4))  as Age
,'USA' as Country
,CASE
WHEN SaleType='Retail' AND ([SalePriceSF]/CurrentABCostUSNA < @intercept_RetLow - (@intercept_RetLow*(YEAR(SaleDate)-ModelYear + (MONTH(SaleDate)-6)/12.00))/@denom_low
OR [SalePriceSF]/CurrentABCostUSNA > @intercept_RetHi - (@intercept_RetHi*(YEAR(SaleDate)-ModelYear + (MONTH(SaleDate)-6)/12.00))/@denom_hi) THEN 'EcxRegr'
WHEN SaleType='Auction' AND ([SalePriceSF]/CurrentABCostUSNA < @intercept_AucLow - (@intercept_AucLow*(YEAR(SaleDate)-ModelYear + (MONTH(SaleDate)-6)/12.00))/@denom_low
OR [SalePriceSF]/CurrentABCostUSNA > @intercept_AucHi - (@intercept_AucHi*(YEAR(SaleDate)-ModelYear + (MONTH(SaleDate)-6)/12.00))/@denom_hi)THEN 'EcxRegr'
ELSE 'inUse' END AS 'Flag'
,CASE WHEN Modelyear < @botyear or Modelyear >@topyear THEN 'ExtYrs' ELSE 'AdjusUseYr' END AS 'YearFlag'
FROM [ras_sas].[BI].[Comparables]
WHERE
( ([source]='internet'
AND NOT ((AuctioneerClassification LIKE '%unused%' OR [Description] LIKE '%unused%') AND (SaleYear - ModelYear > 1))
AND NOT (auctioneer = 'Alex Lyon & Son' and age between 0 and 24)
AND NOT ([Description] like '%reman%' or [Description] like '%refurb%' or [Description] like '%recon%'))
OR ([source]='internet' AND (AuctioneerClassification IS NULL OR [Description] IS  NULL)
AND NOT (auctioneer = 'Alex Lyon & Son' and age between 0 and 24) )
OR (SaleType='retail' AND IsUsedForComparablesUSNA='Y' AND [MilesHours]>=100
))
AND CategoryId Not In (220,	1948,	18,	4,	1949,	234,	21,	31,	2733,	2706,	2718,	2692,	2724,	2674,	2700,	2708)
AND MakeId NOT in (58137,78) --Miscellaneous,Not Attributed
AND NOT ([SubcategoryId] in (2806,2808,2001,2636) and makeid=31 and ModelName not like 'XQ%')
AND NOT (modelid = 40413)
AND SaleDate >@dateStart AND saledate<=@dateEnd
--and categoryid in (453)
--AND SaleDate >='2018-09-01' AND saledate<='2019-08-31'
AND ModelYear <= @compingyr
and ModelYear>= CASE WHEN categoryid in (2605,2603,2608,2604,2606)  THEN @year_20 ELSE @dep_endyr END
AND [SalePriceSF]>100
AND CurrentABCostUSNA is not NULL
AND M1PrecedingFmv IS NOT NULL
AND M1PrecedingFlv IS NOT NULL
AND M1PrecedingABCostUSNA is not NULL
AND Option15 is NULL "
uploadData <- sqlQuery(channel,US_dataload)
####
#publishDate = as.Date('2019-08-31')
thirdLastM<-as.Date(publishDate%m-% months(1)- days(day(publishDate)))
sixLastM<-as.Date(publishDate%m-% months(5)- days(day(publishDate)))
setwd(scripts_path)
## Read the R script
runc<-parse('c.listings.r')
rund<-parse('d.datacleaning.r')
rune<-parse('e.buildmodel.r')
runf<-parse('f.adjustment.r')
rung<-parse('g.violationcheck.r')
runh<-parse('h. depreciation&monthlimit.r')
runi<-parse('i.makeschedules.r')
runj<-parse('j.upload&plots.r')
eval(runc)
print('Listing is done')
eval(rund)
print('Data cleaning is done')
eval(rune)
print('Stats model is done')
eval(runf)
print('Adjustments is done')
eval(rung)
print('Violation check is done')
eval(runh)
print('Depreciation and MoM are done')
eval(runi)
print('Make Adjusters is done')
setwd(file_path)
write.xlsx2(as.data.frame(EDAview.N.trans),file = paste(publishDate,CountryCode," EDA_exc.xlsx"),sheetName = 'NumUnits',row.names =F)
write.xlsx2(as.data.frame(EDAview.mean.trans),file = paste(publishDate,CountryCode," EDA_exc.xlsx"),sheetName = 'SPValMean',row.names =F,append=T)
View(Datainput)
outsfdfa<-Datainput %>% group_by(Schedule) %>% filter(YearFlag='AdjusUseYr' & SaleType='Retail')
outsfdfa<-Datainput %>% group_by(Schedule) %>% filter(YearFlag=='AdjusUseYr' & SaleType=='Retail')
View(outsfdfa)
outsfdfa<-Datainput %>% group_by(Schedule) %>% filter(YearFlag=='AdjusUseYr' & SaleType=='Retail') %>% summarise(n=n())
write.csv(outsfdfa,"Numsales")
write.csv(outsfdfa,"Numsales.csv")
runb<-parse('b.sqlQueries_US.r')
setwd(scripts_path)
runb<-parse('b.sqlQueries_US.r')
eval(runb)
uploadData <- sqlQuery(channel,US_dataload)
### Combine C, CS and CSM levels of data into one & exclude bad data
Datainput<-split.joinlevel(In,uploadData,'') %>%
filter(as.Date(EffectiveDate)<=publishDate & Flag =='inUse')%>%
# filter((SaleType != 'Auction' & difftime(SaleDate, AcquisitionDate,units = "weeks")>78)
#          | SaleType == 'Auction') %>%
mutate(CompId = factor(CompId)) %>%
group_by(Schedule,SaleType) %>%
#summarise(mean = mean(SPvalue),st=sd(SPvalue))
filter(SPvalue <= mean(SPvalue) + stdInd*sd(SPvalue) & SPvalue>= mean(SPvalue) - stdInd*sd(SPvalue))
outsfdfa<-Datainput %>% group_by(Schedule) %>% filter(YearFlag=='AdjusUseYr' & SaleType=='Retail') %>% summarise(n=n())
write.csv(outsfdfa,"Numsalesbefore.csv")
excMedBigJD<-Datainput %>% filter(Schedule =='Excavators Medium Big John Deere USA')
View(excMedBigJD)
excMedBigJD<-Datainput %>% filter(Schedule =='Excavators Medium Big John Deere USA' & SaleType='Retail')
excMedBigJD<-Datainput %>% filter(Schedule =='Excavators Medium Big John Deere USA' & SaleType=='Retail')
write.csv(excMedBigJD,"excMedBigJD.csv")
select.var<-c('CompId',	'CategoryId',	'CategoryName',	'SubcategoryId',	'SubcategoryName',	'MakeId',	'MakeName',	'ModelId',	'ModelName',
'ModelYear',	'SaleDate','AcquisitionDate','EffectiveDate',	'SalePrice',	'M1Value',	'SaleType',	'M1AppraisalBookPublishDate',	'SaleAB',
'SPvalue',	'CurrentABCost',	'Age',	'Flag',	'YearFlag',	'Schedule','MilesHours')
###split join level
split.joinlevel<-function(input,dataload,brwtype){
select.var<-c('CompId',	'CategoryId',	'CategoryName',	'SubcategoryId',	'SubcategoryName',	'MakeId',	'MakeName',	'ModelId',	'ModelName',
'ModelYear',	'SaleDate','AcquisitionDate','EffectiveDate',	'SalePrice',	'M1Value',	'SaleType',	'M1AppraisalBookPublishDate',	'SaleAB',
'SPvalue',	'CurrentABCost',	'Age',	'Flag',	'YearFlag',	'Schedule','MilesHours')
select.var.brw<-c('BorrowSchedule',	'BorrowType')
Catlevel<-input %>% filter(Level2 =='Category') %>% select(-SubcategoryId,-MakeId)
Subcatlevel<-input %>% filter(Level2 == "SubcatGroup") %>% select(-MakeId)
Makelevel<-input %>% filter(Level2 =='Make')
if(brwtype=='brw'){
CatData <- merge(dataload,Catlevel, by=c("CategoryId","Country")) %>%
mutate(str = str_sub(CompId,-1)) %>%
filter(MakeId !=31 | (MakeId ==31 & str<=indexUse)) %>%
select(c(select.var,select.var.brw))
SubcatData <- merge(dataload,Subcatlevel, by=c('CategoryId',"SubcategoryId","Country")) %>%
mutate(str = str_sub(CompId,-1)) %>%
filter(MakeId !=31 | (MakeId ==31 & str<=indexUse)) %>%
select(c(select.var,select.var.brw))
MakeData<-merge(dataload,Makelevel, by=c('CategoryId',"SubcategoryId","MakeId","Country")) %>% select(c(select.var,select.var.brw))
}
else{
CatData <- merge(dataload,Catlevel, by=c("CategoryId","Country")) %>%
mutate(str = str_sub(CompId,-1)) %>%
filter(MakeId !=31 | (MakeId ==31 & str<=indexUse)) %>%
select(all_of(select.var))
SubcatData <- merge(dataload,Subcatlevel, by=c('CategoryId',"SubcategoryId","Country")) %>%
mutate(str = str_sub(CompId,-1)) %>%
filter(MakeId !=31 | (MakeId ==31 & str<=indexUse)) %>%
select(all_of(select.var))
MakeData<-merge(dataload,Makelevel, by=c('CategoryId',"SubcategoryId","MakeId","Country")) %>% select(all_of(select.var))
}
return(rbind(CatData,SubcatData,MakeData))}
### Combine C, CS and CSM levels of data into one & exclude bad data
Datainput<-split.joinlevel(In,uploadData,'') %>%
filter(as.Date(EffectiveDate)<=publishDate & Flag =='inUse')%>%
# filter((SaleType != 'Auction' & difftime(SaleDate, AcquisitionDate,units = "weeks")>78)
#          | SaleType == 'Auction') %>%
mutate(CompId = factor(CompId)) %>%
group_by(Schedule,SaleType) %>%
#summarise(mean = mean(SPvalue),st=sd(SPvalue))
filter(SPvalue <= mean(SPvalue) + stdInd*sd(SPvalue) & SPvalue>= mean(SPvalue) - stdInd*sd(SPvalue))
outsfdfa<-Datainput %>% group_by(Schedule) %>% filter(YearFlag=='AdjusUseYr' & SaleType=='Retail') %>% summarise(n=n())
write.csv(outsfdfa,"Numsalesbefore.csv")
write.csv(outsfdfa,"Numsalesbefore.csv")
write.csv(outsfdfa,"Numsalesbefore.csv")
excMedBigJD<-Datainput %>% filter(Schedule =='Excavators Medium Big John Deere USA' & SaleType=='Retail')
write.csv(excMedBigJD,"excMedBigJD.csv")
View(excMedBigJD)
ArtiTruck<-Datainput %>% filter(Schedule =='Articulated Trucks Volvo USA' & SaleType=='Retail')
write.csv(ArtiTruck,"ArtiTruck.csv")
concret<-Datainput %>% filter(Schedule =='Concrete Equipment USA' & SaleType=='Retail')
write.csv(concret,"concret.csv")
