data.frame(anti_join(rows_count,morethan_thres_list,by='Schedule') %>% filter(rowNum<=thresholdNum)))
}
return(recent_output)
}
SaleDt_appcheck<-Use_Latest_Data(SaleDt_app,'Age',30,'Latest_one_age',1)
recent_time
View(SaleDt_appcheck)
View(SaleDt_dep)
View(SaleDt_appcheck)
View(SaleDt_app)
SaleDt_appcheck<-Use_Latest_Data(SaleDt_app,'Age',30,'Latest_one_age',1.0)
SaleDt_app <- SaleDtRet %>%
filter(as.Date(EffectiveDate)<=publishDate & Flag =="inUse" & Age <2) %>%
group_by(Schedule) %>%
filter(SPvalue <= ave(SPvalue) + stdInd*sd(SPvalue) & SPvalue>= ave(SPvalue) - stdInd*sd(SPvalue)) %>%
filter(Schedule =='Excavators Medium Small John Deere USA')
SaleDt_appcheck<-Use_Latest_Data(SaleDt_app,'Age',30,'Latest_one_age',1.0)
return(morethan_thres_list)
Use_Latest_Data<-function(df,sort_var,thresholdNum,time_date,recent_time){
if(sort_var == 'SaleDate'){
rows_count<-df %>%
group_by(Schedule) %>%
arrange(desc(SaleDate)) %>%
mutate(rowNum=row_number())
}
else if(sort_var == 'Age'){
rows_count<-df %>%
group_by(Schedule) %>%
arrange(Age) %>%
mutate(rowNum=row_number())
}
if(time_date == 'Latest_one_month'){
morethan_thres_list<-rows_count %>%
filter(rowNum == thresholdNum & as.Date(EffectiveDate) == recent_time) %>%
select(Schedule)
recent_output <- rbind(data.frame(merge(rows_count,morethan_thres_list,by='Schedule') %>% filter(as.Date(EffectiveDate) == recent_time)),
data.frame(anti_join(rows_count,morethan_thres_list,by='Schedule') %>% filter(rowNum<=thresholdNum)))
}
else if(time_date == 'Latest_one_age'){
morethan_thres_list<-rows_count %>%
filter(rowNum == thresholdNum & Age == recent_time) %>%
select(Schedule)
recent_output <- rbind(data.frame(merge(rows_count,morethan_thres_list,by='Schedule') %>% filter(Age == recent_time)),
data.frame(anti_join(rows_count,morethan_thres_list,by='Schedule') %>% filter(rowNum<=thresholdNum)))
}
return(morethan_thres_list)
}
SaleDt_appcheck<-Use_Latest_Data(SaleDt_app,'Age',30,'Latest_one_age',1.0)
Use_Latest_Data<-function(df,sort_var,thresholdNum,time_date,recent_time){
if(sort_var == 'SaleDate'){
rows_count<-df %>%
group_by(Schedule) %>%
arrange(desc(SaleDate)) %>%
mutate(rowNum=row_number())
}
else if(sort_var == 'Age'){
rows_count<-df %>%
group_by(Schedule) %>%
arrange(Age) %>%
mutate(rowNum=row_number())
}
if(time_date == 'Latest_one_month'){
morethan_thres_list<-rows_count %>%
filter(rowNum == thresholdNum & as.Date(EffectiveDate) == recent_time) %>%
select(Schedule)
recent_output <- rbind(data.frame(merge(rows_count,morethan_thres_list,by='Schedule') %>% filter(as.Date(EffectiveDate) == recent_time)),
data.frame(anti_join(rows_count,morethan_thres_list,by='Schedule') %>% filter(rowNum<=thresholdNum)))
}
else if(time_date == 'Latest_one_age'){
morethan_thres_list<-rows_count %>%
filter(rowNum == thresholdNum & Age == recent_time) %>%
select(Schedule)
recent_output <- rbind(data.frame(merge(rows_count,morethan_thres_list,by='Schedule') %>% filter(Age == recent_time)),
data.frame(anti_join(rows_count,morethan_thres_list,by='Schedule') %>% filter(rowNum<=thresholdNum)))
}
return(rows_count)
}
SaleDt_appcheck<-Use_Latest_Data(SaleDt_app,'Age',30,'Latest_one_age',1.0)
View(SaleDt_appcheck)
View(SaleDt_appcheck)
Use_Latest_Data<-function(df,sort_var,thresholdNum,time_date,recent_time){
if(sort_var == 'SaleDate'){
rows_count<-df %>%
group_by(Schedule) %>%
arrange(desc(SaleDate)) %>%
mutate(rowNum=row_number())
}
else if(sort_var == 'Age'){
rows_count<-df %>%
group_by(Schedule) %>%
arrange(Age) %>%
mutate(rowNum=row_number())
}
if(time_date == 'Latest_one_month'){
morethan_thres_list<-rows_count %>%
filter(rowNum == thresholdNum & as.Date(EffectiveDate) == recent_time) %>%
select(Schedule)
recent_output <- rbind(data.frame(merge(rows_count,morethan_thres_list,by='Schedule') %>% filter(as.Date(EffectiveDate) == recent_time)),
data.frame(anti_join(rows_count,morethan_thres_list,by='Schedule') %>% filter(rowNum<=thresholdNum)))
}
else if(time_date == 'Latest_one_age'){
morethan_thres_list<-rows_count %>%
filter(Age <= recent_time)%>%
filter(rowNum == thresholdNum) %>%
select(Schedule)
recent_output <- rbind(data.frame(merge(rows_count,morethan_thres_list,by='Schedule') %>% filter(Age == recent_time)),
data.frame(anti_join(rows_count,morethan_thres_list,by='Schedule') %>% filter(rowNum<=thresholdNum)))
}
return(morethan_thres_list)
}
SaleDt_appcheck<-Use_Latest_Data(SaleDt_app,'Age',30,'Latest_one_age',1.0)
View(SaleDt_appcheck)
Use_Latest_Data<-function(df,sort_var,thresholdNum,time_date,recent_time){
if(sort_var == 'SaleDate'){
rows_count<-df %>%
group_by(Schedule) %>%
arrange(desc(SaleDate)) %>%
mutate(rowNum=row_number())
}
else if(sort_var == 'Age'){
rows_count<-df %>%
group_by(Schedule) %>%
arrange(Age) %>%
mutate(rowNum=row_number())
}
if(time_date == 'Latest_one_month'){
morethan_thres_list<-rows_count %>%
filter(rowNum == thresholdNum & as.Date(EffectiveDate) == recent_time) %>%
select(Schedule)
recent_output <- rbind(data.frame(merge(rows_count,morethan_thres_list,by='Schedule') %>% filter(as.Date(EffectiveDate) == recent_time)),
data.frame(anti_join(rows_count,morethan_thres_list,by='Schedule') %>% filter(rowNum<=thresholdNum)))
}
else if(time_date == 'Latest_one_age'){
morethan_thres_list<-rows_count %>%
filter(Age <= recent_time)%>%
filter(rowNum == thresholdNum) %>%
select(Schedule)
recent_output <- rbind(data.frame(merge(rows_count,morethan_thres_list,by='Schedule') %>% filter(Age <= recent_time)),
data.frame(anti_join(rows_count,morethan_thres_list,by='Schedule') %>% filter(rowNum<=thresholdNum)))
}
return(recent_output)
}
SaleDt_appcheck<-Use_Latest_Data(SaleDt_app,'Age',30,'Latest_one_age',1.0)
View(SaleDt_appcheck)
publishDate
Use_Latest_Data<-function(df,sort_var,thresholdNum,time_date,recent_time){
if(sort_var == 'SaleDate'){
rows_count<-df %>%
group_by(Schedule) %>%
arrange(desc(SaleDate)) %>%
mutate(rowNum=row_number())
}
else if(sort_var == 'Age'){
rows_count<-df %>%
group_by(Schedule) %>%
arrange(Age) %>%
mutate(rowNum=row_number())
}
if(time_date == 'Latest_one_month'){
morethan_thres_list<-rows_count %>%
filter(as.Date(EffectiveDate) >= recent_time) %>%
filter(rowNum == thresholdNum) %>%
select(Schedule)
recent_output <- rbind(data.frame(merge(rows_count,morethan_thres_list,by='Schedule') %>% filter(as.Date(EffectiveDate) >= recent_time)),
data.frame(anti_join(rows_count,morethan_thres_list,by='Schedule') %>% filter(rowNum<=thresholdNum)))
}
else if(time_date == 'Latest_one_age'){
morethan_thres_list<-rows_count %>%
filter(Age <= recent_time)%>%
filter(rowNum == thresholdNum) %>%
select(Schedule)
recent_output <- rbind(data.frame(merge(rows_count,morethan_thres_list,by='Schedule') %>% filter(Age <= recent_time)),
data.frame(anti_join(rows_count,morethan_thres_list,by='Schedule') %>% filter(rowNum<=thresholdNum)))
}
return(recent_output)
}
View(shiftRet.calc)
shiftRet.calc<-Use_Latest_Data(shiftRet.count,'SaleDate',threshold_adj,'Latest_one_month',publishDate)%>%
mutate(fmvalue=CurrentABCost*as.numeric(fmv.1)
,SpFmv=SalePrice/fmvalue) %>%
group_by(Schedule,ModelYear) %>%
summarise(avgSPfmv=mean(SpFmv)
,n=n())
View(shiftAuc.calc)
shiftAuc.calc <- Use_Latest_Data(shiftAuc.count,'SaleDate',threshold_adj,'Latest_one_month',publishDate)%>%
mutate(flvalue=CurrentABCost*as.numeric(flv.1)
,SpFlv=SalePrice/flvalue) %>%
group_by(Schedule,ModelYear) %>%
summarise(avgSPflv=mean(SpFlv)
,n=n())
View(shiftAuc.calc)
###################################### Auction  ######################################
## Base adjusters
shiftAuc.count<-merge(SaleDtAuc_adjUse,OutRegression_Auc,by=c("Schedule","ModelYear")) %>%
mutate(power = abs(elapsed_months(EffectiveDate, publishDate)),
flv.1 = flv/(0.99^power)) %>%
group_by(Schedule,ModelYear) %>%
arrange(desc(SaleDate)) %>%
mutate(rowNum = row_number())
View(shiftAuc.count)
Use_Latest_Data<-function(df,sort_var,thresholdNum,use_case,recent_time){
if(sort_var == 'SaleDate'){
if(use_case == 'shift'){
rows_count<-df %>%
group_by(Schedule,ModelYear) %>%
arrange(desc((!!as.symbol(sort_var)))) %>%
mutate(rowNum=row_number())
morethan_thres_list<-rows_count %>%
filter(as.Date(EffectiveDate) >= recent_time) %>%
filter(rowNum == thresholdNum) %>%
select(Schedule,ModelYear)
recent_output <- rbind(data.frame(merge(rows_count,morethan_thres_list,by=c('Schedule','ModelYear')) %>% filter(as.Date(EffectiveDate) >= recent_time)),
data.frame(anti_join(rows_count,morethan_thres_list,by=c('Schedule','ModelYear')) %>% filter(rowNum<=thresholdNum)))
}
else if(use_case =='recency'){
rows_count<-df %>%
group_by(Schedule) %>%
arrange(desc((!!as.symbol(sort_var)))) %>%
mutate(rowNum=row_number())
morethan_thres_list<-rows_count %>%
filter(as.Date(EffectiveDate) >= recent_time) %>%
filter(rowNum == thresholdNum) %>%
select(Schedule)
recent_output <- rbind(data.frame(merge(rows_count,morethan_thres_list,by='Schedule') %>% filter(as.Date(EffectiveDate) >= recent_time)),
data.frame(anti_join(rows_count,morethan_thres_list,by='Schedule') %>% filter(rowNum<=thresholdNum)))
}
}
else if(sort_var == 'Age'){
rows_count<-df %>%
group_by(Schedule) %>%
arrange((!!as.symbol(sort_var))) %>%
mutate(rowNum=row_number())
morethan_thres_list<-rows_count %>%
filter(Age <= recent_time)%>%
filter(rowNum == thresholdNum) %>%
select(Schedule)
recent_output <- rbind(data.frame(merge(rows_count,morethan_thres_list,by='Schedule') %>% filter(Age <= recent_time)),
data.frame(anti_join(rows_count,morethan_thres_list,by='Schedule') %>% filter(rowNum<=thresholdNum)))
}
return(recent_output)
}
SaleDt_appcheck<-Use_Latest_Data(SaleDt_app,'Age',30,'',1.0)
View(SaleDt_appcheck)
SaleDt_app <- SaleDtRet %>%
filter(as.Date(EffectiveDate)<=publishDate & Flag =="inUse" & Age <2) %>%
group_by(Schedule) %>%
filter(SPvalue <= ave(SPvalue) + stdInd*sd(SPvalue) & SPvalue>= ave(SPvalue) - stdInd*sd(SPvalue)) %>%
filter(Schedule =='Excavators Medium Small USA')
SaleDt_appcheck<-Use_Latest_Data(SaleDt_app,'Age',30,'',1.0)
View(SaleDt_appcheck)
###################################### Auction  ######################################
## Base adjusters
shiftAuc.count<-merge(SaleDtAuc_adjUse,OutRegression_Auc,by=c("Schedule","ModelYear")) %>%
mutate(power = abs(elapsed_months(EffectiveDate, publishDate)),
flv.1 = flv/(0.99^power)) %>%
filter(Schedule =='Excavators Medium Small USA')
shiftAuc.calc <- Use_Latest_Data(shiftAuc.count,'SaleDate',threshold_adj,'shift',publishDate)
View(shiftAuc.calc)
###################################### Auction  ######################################
## Base adjusters
shiftAuc.count<-merge(SaleDtAuc_adjUse,OutRegression_Auc,by=c("Schedule","ModelYear")) %>%
mutate(power = abs(elapsed_months(EffectiveDate, publishDate)),
flv.1 = flv/(0.99^power)) %>%
filter(Schedule =='Excavators Medium Small John Deere USA')
shiftAuc.calc <- Use_Latest_Data(shiftAuc.count,'SaleDate',threshold_adj,'shift',publishDate)
View(shiftAuc.calc)
View(shiftAuc.calc)
########################### Calculate the recency scale factors #################
#### recency calculation: if N(recent 1 month) > m, use 1 month; else use most recent n til 3 months
## join the raw data to regression output
join.rec.ret<-merge(data.frame(Data_clean) %>% filter(SaleType !='Auction'), OutRegression_Ret,by=c('Schedule','ModelYear'))%>%
filter(as.Date(EffectiveDate)>=thirdLastM & ModelYear>=botyear & ModelYear<=topyear) %>%
mutate(power = abs(elapsed_months(EffectiveDate, publishDate)),
fmv_shiftLim = fmv/(0.99^power)) %>%
filter(Schedule =='Excavators Medium Small USA')
RPSF_ret.cal <-  Use_Latest_Data(join.rec.ret,'SaleDate',threshold_recency,'recency',publishDate)
View(RPSF_ret.cal)
########################### Calculate the recency scale factors #################
#### recency calculation: if N(recent 1 month) > m, use 1 month; else use most recent n til 3 months
## join the raw data to regression output
join.rec.ret<-merge(data.frame(Data_clean) %>% filter(SaleType !='Auction'), OutRegression_Ret,by=c('Schedule','ModelYear'))%>%
filter(as.Date(EffectiveDate)>=thirdLastM & ModelYear>=botyear & ModelYear<=topyear) %>%
mutate(power = abs(elapsed_months(EffectiveDate, publishDate)),
fmv_shiftLim = fmv/(0.99^power)) %>%
filter(Schedule =='Excavators Medium Small Komatsu USA')
RPSF_ret.cal <-  Use_Latest_Data(join.rec.ret,'SaleDate',threshold_recency,'recency',publishDate)
View(RPSF_ret.cal)
threshold_recency
########################### Calculate the recency scale factors #################
#### recency calculation: if N(recent 1 month) > m, use 1 month; else use most recent n til 3 months
## join the raw data to regression output
join.rec.ret<-merge(data.frame(Data_clean) %>% filter(SaleType !='Auction'), OutRegression_Ret,by=c('Schedule','ModelYear'))%>%
filter(as.Date(EffectiveDate)>=thirdLastM & ModelYear>=botyear & ModelYear<=topyear) %>%
mutate(power = abs(elapsed_months(EffectiveDate, publishDate)),
fmv_shiftLim = fmv/(0.99^power)) %>%
filter(Schedule =='Excavators Medium Small Caterpillar USA')
RPSF_ret.cal <-  Use_Latest_Data(join.rec.ret,'SaleDate',threshold_recency,'recency',publishDate)
View(RPSF_ret.cal)
## combine to get the dataset to calculate recency factor, then partial move, apply cap
RPSF_ret.cal <-  Use_Latest_Data(join.rec.ret,'SaleDate',threshold_recency,'recency',publishDate) %>%
group_by(Schedule) %>%
summarise(RPSF = mean(SalePrice/(CurrentABCost*as.numeric(fmv_shiftLim))),n=n()) %>%
mutate(RPSF_Cap = ifelse(n>threshold_recency,1*RPSF,((threshold_recency-n)+n*RPSF)/threshold_recency)) %>%
mutate(f.recency.ret = pmin(1+recency_cap,pmax(RPSF_Cap,1-recency_cap))) %>%
select(Schedule,f.recency.ret)
View(RPSF_ret.cal)
###################################### Auction  ######################################
## Base adjusters
shiftAuc.count<-merge(SaleDtAuc_adjUse,OutRegression_Auc,by=c("Schedule","ModelYear")) %>%
mutate(power = abs(elapsed_months(EffectiveDate, publishDate)),
flv.1 = flv/(0.99^power))  %>%
filter(Schedule =='Excavators Medium Small Caterpillar USA')
threshold_adj
shiftAuc.calc <- Use_Latest_Data(shiftAuc.count,'SaleDate',threshold_adj,'shift',publishDate)
View(shiftAuc.calc)
###################################### Auction  ######################################
## Base adjusters
shiftAuc.count<-merge(SaleDtAuc_adjUse,OutRegression_Auc,by=c("Schedule","ModelYear")) %>%
mutate(power = abs(elapsed_months(EffectiveDate, publishDate)),
flv.1 = flv/(0.99^power))  %>%
filter(Schedule =='Excavators Medium Small USA')
shiftAuc.calc <- Use_Latest_Data(shiftAuc.count,'SaleDate',threshold_adj,'shift',publishDate)
View(shiftAuc.calc)
Use_Latest_Data<-function(df,sort_var,thresholdNum,use_case,recent_time){
if(sort_var == 'SaleDate'){
if(use_case == 'shift'){
rows_count<-df %>%
group_by(Schedule,ModelYear) %>%
arrange(desc((!!as.symbol(sort_var)))) %>%
mutate(rowNum=row_number())
morethan_thres_list<-rows_count %>%
filter(as.Date(EffectiveDate) >= recent_time) %>%
filter(rowNum == thresholdNum) %>%
select(Schedule,ModelYear)
recent_output <- rbind(data.frame(merge(rows_count,morethan_thres_list,by=c('Schedule','ModelYear')) %>% filter(as.Date(EffectiveDate) >= recent_time)),
data.frame(anti_join(rows_count,morethan_thres_list,by=c('Schedule','ModelYear')) %>% filter(rowNum<=thresholdNum)))
}
else if(use_case =='recency'){
rows_count<-df %>%
group_by(Schedule) %>%
arrange(desc((!!as.symbol(sort_var)))) %>%
mutate(rowNum=row_number())
morethan_thres_list<-rows_count %>%
filter(as.Date(EffectiveDate) >= recent_time) %>%
filter(rowNum == thresholdNum) %>%
select(Schedule)
recent_output <- rbind(data.frame(merge(rows_count,morethan_thres_list,by='Schedule') %>% filter(as.Date(EffectiveDate) >= recent_time)),
data.frame(anti_join(rows_count,morethan_thres_list,by='Schedule') %>% filter(rowNum<=thresholdNum)))
}
}
else if(sort_var == 'Age'){
rows_count<-df %>%
group_by(Schedule) %>%
arrange((!!as.symbol(sort_var))) %>%
mutate(rowNum=row_number())
morethan_thres_list<-rows_count %>%
filter(Age <= recent_time)%>%
filter(rowNum == thresholdNum) %>%
select(Schedule)
recent_output <- rbind(data.frame(merge(rows_count,morethan_thres_list,by='Schedule') %>% filter(Age <= recent_time)),
data.frame(anti_join(rows_count,morethan_thres_list,by='Schedule') %>% filter(rowNum<=thresholdNum)))
}
return(rows_count)
}
shiftAuc.calc <- Use_Latest_Data(shiftAuc.count,'SaleDate',threshold_adj,'shift',publishDate)
View(shiftAuc.calc)
Use_Latest_Data<-function(df,sort_var,thresholdNum,use_case,recent_time){
if(sort_var == 'SaleDate'){
if(use_case == 'shift'){
rows_count<-df %>%
group_by(Schedule,ModelYear) %>%
arrange(desc((!!as.symbol(sort_var)))) %>%
mutate(rowNum=row_number())
morethan_thres_list<-rows_count %>%
filter(as.Date(EffectiveDate) >= recent_time) %>%
filter(rowNum == thresholdNum) %>%
select(Schedule,ModelYear)
recent_output <- rbind(data.frame(merge(rows_count,morethan_thres_list,by=c('Schedule','ModelYear')) %>% filter(as.Date(EffectiveDate) >= recent_time)),
data.frame(anti_join(rows_count,morethan_thres_list,by=c('Schedule','ModelYear')) %>% filter(rowNum<=thresholdNum)))
}
else if(use_case =='recency'){
rows_count<-df %>%
group_by(Schedule) %>%
arrange(desc((!!as.symbol(sort_var)))) %>%
mutate(rowNum=row_number())
morethan_thres_list<-rows_count %>%
filter(as.Date(EffectiveDate) >= recent_time) %>%
filter(rowNum == thresholdNum) %>%
select(Schedule)
recent_output <- rbind(data.frame(merge(rows_count,morethan_thres_list,by='Schedule') %>% filter(as.Date(EffectiveDate) >= recent_time)),
data.frame(anti_join(rows_count,morethan_thres_list,by='Schedule') %>% filter(rowNum<=thresholdNum)))
}
}
else if(sort_var == 'Age'){
rows_count<-df %>%
group_by(Schedule) %>%
arrange((!!as.symbol(sort_var))) %>%
mutate(rowNum=row_number())
morethan_thres_list<-rows_count %>%
filter(Age <= recent_time)%>%
filter(rowNum == thresholdNum) %>%
select(Schedule)
recent_output <- rbind(data.frame(merge(rows_count,morethan_thres_list,by='Schedule') %>% filter(Age <= recent_time)),
data.frame(anti_join(rows_count,morethan_thres_list,by='Schedule') %>% filter(rowNum<=thresholdNum)))
}
return(recent_output)
}
###################################### Auction  ######################################
## Base adjusters
shiftAuc.count<-merge(SaleDtAuc_adjUse,OutRegression_Auc,by=c("Schedule","ModelYear")) %>%
mutate(power = abs(elapsed_months(EffectiveDate, publishDate)),
flv.1 = flv/(0.99^power))  %>%
filter(Schedule =='Excavators USA')
shiftAuc.calc <- Use_Latest_Data(shiftAuc.count,'SaleDate',threshold_adj,'shift',publishDate) %>%
mutate(flvalue=CurrentABCost*as.numeric(flv.1)
,SpFlv=SalePrice/flvalue) %>%
group_by(Schedule,ModelYear) %>%
summarise(avgSPflv=mean(SpFlv)
,n=n())
shiftAuc.calc <- Use_Latest_Data(shiftAuc.count,'SaleDate',threshold_adj,'shift',publishDate)
View(shiftAuc.calc)
threshold_appr = 30
appr_ageuse_fix = 1
capApp <- appreciation %>%
mutate(app = pmin(appBound_upp,pmax(appBound_bot,outputapp))) %>%
mutate(ModelYear = 'App',
rate0 = ifelse(is.na(app),appBound_na,app))
write.csv(capApp,"capApp_prior.csv")
app_yrgap = 3.00
appBound_upp = 0.12
appBound_bot = 0.03
appBound_na = 0.08
SaleDt_app <- SaleDtRet %>%
filter(as.Date(EffectiveDate)<=publishDate & Flag =="inUse" & Age <2) %>%
group_by(Schedule) %>%
filter(SPvalue <= ave(SPvalue) + stdInd*sd(SPvalue) & SPvalue>= ave(SPvalue) - stdInd*sd(SPvalue))
## prepare the data for regression use. use age from youngest up to 1 at least, then check if enough x data points, if not, extend to use up to age 2
SaleDt_appr_modeluse<-Use_Latest_Data(SaleDt_app,'Age',threshold_appr,'',appr_ageuse_fix)
## create variable
outputapp<-matrix(0,nSched_Ret)
n.app<-matrix(0,nSched_Ret)
for (j in 1:nSched_Ret){
groupData<-subset(SaleDt_appr_modeluse,SaleDt_appr_modeluse$Schedule==ret_appr_regr[j,1])
if(nrow(groupData)>3){
################## regression Model #########################
fit<-lm(log(SaleAB)~Age,data=groupData)
outputapp[j]<-1-exp(fit$coefficients[2])
n.app[j]<-nrow(groupData)
}
}
## Manage the output format
appreciation<-data.frame(ret_appr_regr[,1],outputapp,n.app)
colnames(appreciation)<-c('Schedule','outputapp','NumComps.app')
capApp <- appreciation %>%
mutate(app = pmin(appBound_upp,pmax(appBound_bot,outputapp))) %>%
mutate(ModelYear = 'App',
rate0 = ifelse(is.na(app),appBound_na,app))
write.csv(capApp,"capApp_current.csv")
endYrRate
## modify the second last year if needed to prevent jump when rebase
depr_constr<- merge(Sched_joinDepr %>% filter(ModelYear == botyear +1) %>% select(ClassificationId,Adjfmv,Adjflv,ModelYear),
Sched_joinDepr %>% filter(ModelYear == botyear ) %>% select(ClassificationId,Adjfmv,Adjflv,ModelYear,rate),
by='ClassificationId') %>%
mutate(Adjfmv = pmin(pmax(Adjfmv.y *(1 + rate) - endYrRate, Adjfmv.x),Adjfmv.y *(1 + rate) + endYrRate),
Adjflv = pmin(pmax(Adjflv.y *(1 + rate) - endYrRate, Adjflv.x),Adjflv.y *(1 + rate) + endYrRate)) %>%
mutate(Adjfmv.1 = pmin(pmax(Adjfmv.y *(1 + rate) * 1.03, Adjfmv.x),Adjfmv.y *(1 + rate) / 1.03),
Adjflv.1 = pmin(pmax(Adjflv.y *(1 + rate) * 1.03, Adjflv.x),Adjflv.y *(1 + rate) /1.03)) %>%
select(ClassificationId,Adjfmv, Adjflv,Adjfmv.1, Adjflv.1)
View(depr_constr)
## modify the second last year if needed to prevent jump when rebase
depr_constr<- merge(Sched_joinDepr %>% filter(ModelYear == botyear +1) %>% select(ClassificationId,Adjfmv,Adjflv,ModelYear),
Sched_joinDepr %>% filter(ModelYear == botyear ) %>% select(ClassificationId,Adjfmv,Adjflv,ModelYear,rate),
by='ClassificationId') %>%
mutate(Adjfmv = pmin(pmax(Adjfmv.y *(1 + rate) - endYrRate, Adjfmv.x),Adjfmv.y *(1 + rate) + endYrRate),
Adjflv = pmin(pmax(Adjflv.y *(1 + rate) - endYrRate, Adjflv.x),Adjflv.y *(1 + rate) + endYrRate)) %>%
mutate(Adjfmv.1 = pmin(pmax(Adjfmv.y *(1 + rate) * 1.03, Adjfmv.x),Adjfmv.y *(1 + rate) / 1.03),
Adjflv.1 = pmin(pmax(Adjflv.y *(1 + rate) * 1.03, Adjflv.x),Adjflv.y *(1 + rate) /1.03)) %>%
select(ClassificationId,Adjfmv.y,Adjflv.y,Adjfmv, Adjflv,Adjfmv.1, Adjflv.1)
View(depr_constr)
## modify the second last year if needed to prevent jump when rebase
depr_constr<- merge(Sched_joinDepr %>% filter(ModelYear == botyear +1) %>% select(ClassificationId,Adjfmv,Adjflv,ModelYear),
Sched_joinDepr %>% filter(ModelYear == botyear ) %>% select(ClassificationId,Adjfmv,Adjflv,ModelYear,rate),
by='ClassificationId') %>%
mutate(Adjfmv = pmin(pmax(Adjfmv.y *(1 + rate) - endYrRate, Adjfmv.x),Adjfmv.y *(1 + rate) + endYrRate),
Adjflv = pmin(pmax(Adjflv.y *(1 + rate) - endYrRate, Adjflv.x),Adjflv.y *(1 + rate) + endYrRate)) %>%
mutate(Adjfmv.1 = pmin(pmax(Adjfmv.y *(1 + rate) * 1.03, Adjfmv.x),Adjfmv.y *(1 + rate) / 1.03),
Adjflv.1 = pmin(pmax(Adjflv.y *(1 + rate) * 1.03, Adjflv.x),Adjflv.y *(1 + rate) /1.03)) %>%
select(ClassificationId,Adjfmv.x,Adjflv.x,Adjfmv, Adjflv,Adjfmv.1, Adjflv.1)
CapSchedule %>% filter(ClassificationId==2)
## modify the second last year if needed to prevent jump when rebase
depr_constr<- merge(Sched_joinDepr %>% filter(ModelYear == botyear +1) %>% select(ClassificationId,Adjfmv,Adjflv,ModelYear),
Sched_joinDepr %>% filter(ModelYear == botyear ) %>% select(ClassificationId,Adjfmv,Adjflv,ModelYear,rate),
by='ClassificationId') %>%
mutate(Adjfmv = pmin(pmax(Adjfmv.y *(1 + rate) - endYrRate, Adjfmv.x),Adjfmv.y *(1 + rate) + endYrRate),
Adjflv = pmin(pmax(Adjflv.y *(1 + rate) - endYrRate, Adjflv.x),Adjflv.y *(1 + rate) + endYrRate)) %>%
mutate(Adjfmv.1 = pmin(pmax(Adjfmv.y *(1 + rate) / 1.03, Adjfmv.x),Adjfmv.y *(1 + rate) * 1.03),
Adjflv.1 = pmin(pmax(Adjflv.y *(1 + rate) / 1.03, Adjflv.x),Adjflv.y *(1 + rate) *1.03)) %>%
select(ClassificationId,Adjfmv.x,Adjflv.x,Adjfmv, Adjflv,Adjfmv.1, Adjflv.1)
CapSchedule %>% filter(ClassificationId==74)
## modify the second last year if needed to prevent jump when rebase
depr_constr<- merge(Sched_joinDepr %>% filter(ModelYear == botyear +1) %>% select(ClassificationId,Adjfmv,Adjflv,ModelYear),
Sched_joinDepr %>% filter(ModelYear == botyear ) %>% select(ClassificationId,Adjfmv,Adjflv,ModelYear,rate),
by='ClassificationId') %>%
mutate(Adjfmv = pmin(pmax(Adjfmv.y *(1 + rate) - endYrRate, Adjfmv.x),Adjfmv.y *(1 + rate) + endYrRate),
Adjflv = pmin(pmax(Adjflv.y *(1 + rate) - endYrRate, Adjflv.x),Adjflv.y *(1 + rate) + endYrRate)) %>%
mutate(Adjfmv.1 = pmin(pmax(Adjfmv.y *(1 + rate) / 1.03, Adjfmv.x),Adjfmv.y *(1 + rate) * 1.03),
Adjflv.1 = pmin(pmax(Adjflv.y *(1 + rate) / 1.03, Adjflv.x),Adjflv.y *(1 + rate) *1.03)) %>%
mutate(diff=Adjflv.x-Adjflv.1) %>%
select(ClassificationId,Adjfmv.x,Adjflv.x,Adjfmv, Adjflv,Adjfmv.1, Adjflv.1,diff)
CapSchedule %>% filter(ClassificationId==30)
CapSchedule %>% filter(ClassificationId==452)
CapSchedule %>% filter(ClassificationId==83864)
